import { useCallback, useEffect, useRef, useState } from 'react';
import Head from 'next/head';
import Crossword from 'react-crossword-near';

import { DEFAULT_FUNCTION_CALL_GAS } from 'near-api-js/src/constants';

import { createGridData, loadGuesses } from 'react-crossword-near/dist/es/util';
import sha256 from 'js-sha256';

import { mungeBlockchainCrossword, parseSolutionSeedPhrase, viewMethodOnContract, walletConnection } from '_utils';
import dataHardCode from '_utils/hardcoded_data';
import nearCLICommand from '_utils/near-cli-command';
import getConfig from '_config';

const nearConfig = getConfig(process.env.NEXT_PUBLIC_NEAR_ENV);
const Home = () => {
    const crossword = useRef();
    const [solutionFound, setSolutionFound] = useState('Not correct yet');
    const [showLoader, setShowLoader] = useState(false);
    const [currentUser, setCurrentUser] = useState(false);
    const [solutionHash, setSolutionHash] = useState(null);
    const [data, setData] = useState(dataHardCode);
    const [transactionHash, setTransactionHash] = useState(false);

    useEffect(async () => {
        const walConn = await walletConnection();
        if (walConn.getAccountId()) {
            setCurrentUser(walConn.getAccountId());
        }

        const chainData = await viewMethodOnContract(nearConfig, 'get_unsolved_puzzles', '{}');
        if (chainData.puzzles.length) {
            const solutionHash = chainData.puzzles[0]['solution_hash'];
            const data = mungeBlockchainCrossword(chainData.puzzles);

            setSolutionHash(solutionHash);
            setData(data);
        }
    }, []);

    const onCrosswordComplete = useCallback(async completeCount => {
        if (completeCount) {
            let gridData = createGridData(data).gridData;
            loadGuesses(gridData, 'guesses');
            await checkSolution(gridData);
        }
    }, []);

    const checkSolution = async gridData => {
        let seedPhrase = parseSolutionSeedPhrase(data, gridData);
        let answerHash = sha256.sha256(seedPhrase);

        if (answerHash === solutionHash) {
            setSolutionFound('Correct!');

            // Clean up and get ready for next puzzle
            localStorage.removeItem('guesses');
            setSolutionHash(null);
            // Show full-screen loader as we process transaction
            setShowLoader(true);

            const walConn = await walletConnection();
            // Send the 5 NEAR prize to the logged-in winner
            let functionCallResult = walConn.account().functionCall({
                contractId: nearConfig.contractName,
                methodName: 'submit_solution',
                args: { solution: seedPhrase, memo: 'Yay I won!' },
                gas: DEFAULT_FUNCTION_CALL_GAS, // optional param, by the way
                attachedDeposit: 0,
                walletMeta: '', // optional param, by the way
                walletCallbackUrl: '', // optional param, by the way
            });
            if (functionCallResult?.transaction?.hash) {
                console.log('Transaction hash for explorer', functionCallResult.transaction.hash);
                setTransactionHash(functionCallResult.transaction.hash);
            }
            setShowLoader(false);
        } else {
            setSolutionFound('Not correct yet');
        }
    };

    const signIn = async () => {
        const walConn = await walletConnection();
        walConn.requestSignIn(
            nearConfig.contractName,
            '', // title. Optional, by the way
            '', // successUrl. Optional, by the way
            '', // failureUrl. Optional, by the way
        );
    };

    const signOut = async () => {
        const walConn = await walletConnection();
        walConn.signOut();
        window.location.replace(window.location.origin + window.location.pathname);
    };

    if (showLoader) {
        return (
            <div className="wrapper">
                <header className="site-header"></header>
                <main className="main-area">Loading...</main>
            </div>
        );
    }

    if (solutionHash) {
        return (
            <>
                <Head>
                    <title>VTS crossword puzzle</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.png" />
                </Head>

                <main id="crossword-wrapper">
                    <h1>NEAR Crossword Puzzle</h1>
                    <div id="login">
                        {currentUser ? (
                            <button onClick={signOut}>Log out</button>
                        ) : (
                            <button onClick={signIn}>Log in</button>
                        )}
                    </div>

                    <h3>Status: {solutionFound}</h3>
                    <Crossword data={data} ref={crossword} onCrosswordComplete={onCrosswordComplete} />
                </main>

                <p className="thanks">
                    Thank you{' '}
                    <a href="https://github.com/JaredReisinger/react-crossword" target="_blank" rel="noreferrer">
                        @jaredreisinger/react-crossword
                    </a>
                    !
                </p>
            </>
        );
    }

    const explorerUrl = `https://explorer.testnet.near.org/transactions/${transactionHash}`;
    return (
        <div id="page">
            <h1>NEAR Crossword Puzzle</h1>
            <div id="crossword-wrapper" className="no-puzzles">
                {transactionHash && (
                    <a href={explorerUrl} target="_blank">
                        See transaction on NEAR Explorer
                    </a>
                )}
                <h2>No puzzles to solve :)</h2>
                <p>Sorry, no puzzles to solve.</p>
                <p>If you are the developer and are surprised to see this, perhaps you'll want to add a puzzle:</p>
                <p>
                    With{' '}
                    <a href="https://docs.near.org/docs/tools/near-cli#installation" target="_blank">
                        NEAR CLI
                    </a>
                    :
                </p>
                <div className="cli-command">
                    <code>{nearCLICommand}</code>
                </div>
            </div>
        </div>
    );
};

export default Home;
